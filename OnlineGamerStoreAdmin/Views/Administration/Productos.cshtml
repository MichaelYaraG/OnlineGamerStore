﻿@{
    ViewData["Title"] = "Lista de Productos";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/OnlineGamerStoreAdmin.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/Productos.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>

    <div class="card">
        <h2 class="card-header">Administración De Productos</h2>
        <div class="card-body">
            <div id="app">
                <button type="button" class="btn btn-success" @@click="abrirModalNueva">Nuevo Producto</button>
                <hr />
                <h5>Lista de Productos</h5>
                <table v-if="productos.length > 0" class="table table-striped">
                    <thead>
                        <tr>
                            <th @@click="ordenarPor('idProducto')">ID</th>
                            <th @@click="ordenarPor('nombreProducto')">Producto</th>
                            <th @@click="ordenarPor('descripcionProducto')">Descripción Producto</th>
                            <th @@click="ordenarPor('descripcionCategoria')">Categoria</th>
                            <th @@click="ordenarPor('descripcionMarca')">Marca</th>
                            <th @@click="ordenarPor('ivaValor')">Valor IVA</th>
                            <th @@click="ordenarPor('precio')">Precio Sin Iva</th>
                            <th @@click="ordenarPor('precioConIva')">Precio Total</th>
                            <th @@click="ordenarPor('stock')">Stock</th>
                            <th @@click="ordenarPor('estado')">Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="productos in productosPaginados" :key="productos.idProducto">
                            <td>{{ productos.idProducto }}</td>
                            <td>{{ productos.nombreProducto }}</td>
                            <td>{{ productos.descripcionProducto }}</td>
                            <td>{{ productos.descripcionCategoria }}</td>
                            <td>{{ productos.descripcionMarca }}</td>
                            <td>{{ formatoMoneda(productos.ivaValor) }}</td>
                            <td>{{ formatoMoneda(productos.precio) }}</td>
                            <td>{{ formatoMoneda(productos.precioConIva) }}</td>
                            <td>{{ productos.stock }}</td>
                            <td>{{ productos.estado ? 'Activo' : 'Inactivo' }}</td>
                            <td>
                                <button class="btn btn-primary" @@click="abrirModal(productos)">Editar</button>
                                <button type="button" class="btn btn-danger" @@click="eliminarProducto(productos.idProducto)">Eliminar</button>
                                <button type="button" class="btn btn-dark" @@click="abrirModalDetalle(productos)">Detalle</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <p v-else>Cargando Productos...</p>


                <!-- Paginacion de Datos en Tabla -->
                <nav aria-label="Paginacion Tabla">
                    <ul class="pagination">
                        <li class="page-item" :class="{ disabled: paginaActual === 1 }">
                            <a class="page-link" href="#" @@click.prevent="paginaActual--">&laquo;</a>
                        </li>
                        <li v-for="pagina in totalPaginas" :key="pagina" class="page-item" :class="{ active: pagina === paginaActual }">
                            <a class="page-link" href="#" @@click.prevent="paginaActual = pagina">{{ pagina }}</a>
                        </li>
                        <li class="page-item" :class="{ disabled: paginaActual === totalPaginas }">
                            <a class="page-link" href="#" @@click.prevent="paginaActual++">&raquo;</a>
                        </li>
                    </ul>
                </nav>

                <!-- Modal para editar categoría -->
                <div :class="['modal', { mostrar: mostrarModal } ]" @@click.self="cerrarModal">
                    <div class="modal-contenido">
                        <span class="cerrar" @@click="cerrarModal">&times;</span>
                        <h3>{{ esNuevoProducto ? 'Nuevo Producto' : 'Editar Producto' }}</h3>
                        <label>Nombre Producto:</label>
                        <input type="text" v-model="productoSeleccionado.nombreProducto" class="form-control"><br>
                        <label>Descripción Producto:</label>
                        <input type="text" v-model="productoSeleccionado.descripcionProducto" class="form-control"><br>
                        <label>Descripción Categoría:</label>
                        <select v-model="productoSeleccionado.idCategoria" class="form-control">
                            <option v-for="categoria in categorias" :key="categoria.idCategoria" :value="categoria.idCategoria">
                                {{ categoria.descripcionCategoria }}
                            </option>
                        </select>
                        <label>Descripción Marca:</label>
                        <select v-model="productoSeleccionado.idMarca" class="form-control">
                            <option v-for="marca in marcas" :key="marca.idMarca" :value="marca.idMarca">
                                {{ marca.descripcionMarca }}
                            </option>
                        </select>
                        <label>Precio:</label>
                        <input type="number" v-model="productoSeleccionado.precio" class="form-control"><br>
                        <label>Stock:</label>
                        <input type="number" v-model="productoSeleccionado.stock" class="form-control"><br>
                        <label>Activo:</label>
                        <select v-model="productoSeleccionado.estado" class="form-control">
                            <option :value="true">Activo</option>
                            <option :value="false">Inactivo</option>
                        </select><br>
                        <label>Imagen del Producto:</label>
                        <input type="file" ref="ArchivoImagen" @@change="cargarImagen" name="imagen" class="form-control"><br>
                        <div v-if="productoSeleccionado.vistaPreviaImagen" class="imagen-previa-container">
                            <img :src="productoSeleccionado.vistaPreviaImagen" alt="Vista previa" class="imagen-previa">
                        </div>
                        <button class="btn btn-success mt-2" @@click="guardarCambios">Guardar</button>
                    </div>
                </div>

                <!-- Modal para nueva categoría -->
                <div :class="['modal', { mostrar: mostrarModalNueva } ]" @@click.self="cerrarModalNueva">
                    <div class="modal-contenido">
                        <span class="cerrar" @@click="cerrarModalNueva">&times;</span>
                        <label>Nombre Producto:</label>
                        <input type="text" v-model="nuevoProducto.nombreProducto" class="form-control"><br>
                        <label>Descripción Producto:</label>
                        <input type="text" v-model="nuevoProducto.descripcionProducto" class="form-control"><br>
                        <label>Descripción Categoría:</label>
                        <select v-model="nuevoProducto.idCategoria">
                            <option v-for="categoria in categorias" :key="categoria.idCategoria" :value="categoria.idCategoria">
                                {{ categoria.descripcionCategoria }}
                            </option>
                        </select>
                        <label>Descripción Marca:</label>
                        <select v-model="nuevoProducto.idMarca" class="form-control">
                            <option v-for="marca in marcas" :key="marca.idMarca" :value="marca.idMarca">
                                {{ marca.descripcionMarca }}
                            </option>
                        </select>
                        <label>Precio:</label>
                        <input type="number" v-model="nuevoProducto.precio" class="form-control"><br>
                        <label>Stock:</label>
                        <input type="number" v-model="nuevoProducto.stock" class="form-control"><br>
                        <label>Activo:</label>
                        <label>Activo:</label>
                        <select v-model="nuevoProducto.estado" class="form-control">
                            <option :value="true">Activo</option>
                            <option :value="false">Inactivo</option>
                        </select><br>
                        <label>Imagen del Producto:</label>
                        <input type="file" ref="ArchivoImagen" @@change="cargarImagen" name="imagen" class="form-control"><br>
                        <div v-if="nuevoProducto.vistaPreviaImagen" class="imagen-previa-container">
                            <img :src="nuevoProducto.vistaPreviaImagen" alt="Vista previa" class="imagen-previa">
                        </div>
                        <button class="btn btn-success mt-2" @@click="guardarNuevoProducto">Guardar</button>
                    </div>
                </div>

                <!-- Modal para detalle de producto -->
                <div :class="['modal', { mostrar: mostrarModalDetalle } ]" @@click.self="cerrarModalDetalle">
                    <div class="modal-contenido">
                        <h2 style="font-weight: bold; ">Detalle de Producto</h2>
                        <hr />
                        <p><b>Nombre Producto: </b>{{ productoSeleccionado.nombreProducto }}</p>
                        <p><b>Descripción Producto: </b>{{ productoSeleccionado.descripcionProducto }}</p>
                        <p><b>Categoria: </b>{{ productoSeleccionado.descripcionCategoria }}</p>
                        <p><b>Marca: </b>{{ productoSeleccionado.descripcionMarca }}</p>
                        <p><b>Stock: </b>{{ productoSeleccionado.stock }}</p>
                        <p><b>Precio Base: </b>{{ formatoMoneda(productoSeleccionado.precio) }}</p>
                        <p><b>Valor Iva Producto: </b>{{ formatoMoneda(productoSeleccionado.ivaValor) }}</p>
                        <p><b>Precio + Iva: </b>{{ formatoMoneda(productoSeleccionado.precioConIva) }}</p>
                        <p><b>Estado Producto: </b>{{ productoSeleccionado.estado ? 'Activo' : 'Inactivo' }}</p>
                        <p><b>Fecha Registro: </b>{{ new Date(productoSeleccionado.fechaRegistro).toLocaleDateString() }}</p>
                        <div v-if="productoSeleccionado.rutaImagen" class="imagen-previa-container">
                            <img :src="`/imagenes/${productoSeleccionado.nombreImagen}`" alt="Imagen del Producto" class="imagen-previa">
                        </div>

                        <button class="btn btn-secondary mt-3" @@click="cerrarModalDetalle">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- SCRIPT Vue.js PARA CATEGORIAS -->

    <script>
        const app = Vue.createApp({
            data() {
                return {
                    productos: [],
                    vistaPreviaImagen: null,
                    paginaActual: 1,
                    registrosPorPagina: 15,
                    ordenAsc: true,
                    columnaOrden: '',
                    categorias:[],
                    categoriaSeleccionada: null,
                    marcas:[],
                    marcaSeleccionada: null,
                    mostrarModalNueva: false,
                    mostrarModal: false,
                    mostrarModalDetalle: false,
                    productoSeleccionado: {},
                    nuevoProducto: {
                        nombreProducto: '',
                        descripcionProducto: '',
                        estado: true,
                        idCategoria: null,
                        idMarca: null,
                        rutaImagen: null,
                        nombreImagen: null,
                    },
                };
            },
            mounted() {
                this.obtenerProductos();
                this.DDLCategorias();
                this.DDLMarcas();

            },
                computed: {
            totalPaginas() {


                return Math.ceil(this.productos.length / this.registrosPorPagina);
            },
            productosPaginados() {
                const inicio = (this.paginaActual - 1) * this.registrosPorPagina;
                const fin = inicio + this.registrosPorPagina;
                return this.productos.slice(inicio, fin);
            }
        },
            methods: {
                async obtenerProductos() {
                    try {
                        const response = await axios.get('/Administration/Productos', {
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        this.productos = response.data;
                    } catch (error) {
                        console.error('Error al obtener Productos:', error);
                    }
                },
                formatoMoneda(valor) {
                return new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(valor);
                },

                async DDLCategorias() {
                    try {
                        const response = await axios.get('/Administration/DDLCategorias', {
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        this.categorias = response.data;
                    } catch (error) {
                        console.error('Error al obtener Categorias:', error);
                    }
                },
                async DDLMarcas() {
                    try {
                        const response = await axios.get('/Administration/DDLMarcas', {
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        this.marcas = response.data;
                    } catch (error) {
                        console.error('Error al obtener Marcas:', error);
                    }
                },
                ordenarPor(columna) {
                    if (this.columnaOrden === columna) {
                        this.ordenAsc = !this.ordenAsc;
                    } else {
                        this.columnaOrden = columna;
                        this.ordenAsc = true;
                    }
                    this.productos.sort((a, b) => {
                        let valA = a[columna];
                        let valB = b[columna];

                        if (typeof valA === 'string') valA = valA.toLowerCase();
                        if (typeof valB === 'string') valB = valB.toLowerCase();

                        return this.ordenAsc ? (valA > valB ? 1 : -1) : (valA < valB ? 1 : -1);
                    });
                },
                abrirModal(productos) {
                    this.productoSeleccionado = JSON.parse(JSON.stringify(productos));
                    if (this.productoSeleccionado.rutaImagen) {
                        this.productoSeleccionado.vistaPreviaImagen = `/imagenes/${this.productoSeleccionado.nombreImagen}`;
                    } else {
                        this.productoSeleccionado.vistaPreviaImagen = null;
                    }
                    this.mostrarModal = true;
                },
                cerrarModal() {
                    this.mostrarModal = false;
                },
                abrirModalNueva() {
                    this.nuevoProducto = { nombreProducto: '', descripcionProducto:'', estado: true, nombreImagen:'', rutaImagen:'' };
                    this.mostrarModalNueva = true;
                },
                cerrarModalNueva() {
                    this.mostrarModalNueva = false;
                },
                async guardarCambios() {
                    try {
                        const response = await axios.put('/Administration/ActualizarProducto', this.productoSeleccionado);
                        alert(response.data);
                        this.cerrarModal();
                        this.obtenerProductos();
                    } catch (error) {
                        console.error('Error al actualizar el producto:', error);
                        alert('Error al actualizar el producto');
                    }

                },
                abrirModalDetalle(productos){
                    this.productoSeleccionado = JSON.parse(JSON.stringify(productos));
                    this.mostrarModalDetalle = true;

                },
                cerrarModalDetalle() {
                    this.mostrarModalDetalle = false;
                },
                async guardarNuevoProducto() {
                     //console.log("Enviando nuevo producto:", this.nuevoProducto);
                    try {
                        const response = await axios.post('/Administration/CrearProducto', this.nuevoProducto);
                        alert(response.data);
                        this.cerrarModalNueva();
                        this.obtenerProductos();
                    } catch (error) {
                        console.error('Error al crear el producto:', error);
                        alert('Error al crear el producto');
                    }
                },
                async eliminarProducto(idProducto) {
                    if (!confirm("¿Estás seguro de eliminar este producto?")) return;

                    // console.log("ID del producto a eliminar:", idProducto);

                    try {
                        const response = await axios.post(`/Administration/EliminarProducto`,
                            { IDProducto: idProducto },
                            { headers: { 'Content-Type': 'application/json' } }
                        );

                        console.log("Producto eliminado correctamente:", response.data);
                        //alert('Producto eliminado correctamente');
                        this.obtenerProductos();
                    } catch (error) {
                        console.error("Error al eliminar el producto:", error.response ? error.response.data : error.message);
                        alert('Error al eliminar el producto');
                    }
                },
                cargarImagen(event) {
                     const archivo = event.target.files[0];
                     if (!archivo) {
                         alert("No se ha seleccionado ningún archivo.");
                         return;
                     }

                     const formData = new FormData();
                     formData.append("imagen", archivo);

                     fetch("/Administration/SubirImagen", {
                         method: "POST",
                         body: formData
                     })
                     .then(response => {
                         if (!response.ok) {
                             return response.text().then(text => { throw new Error(text); });
                         }
                         return response.json();
                     })
                     .then(data => {
                        // console.log("Imagen guardada:", data);

                         if (!data || !data.nombreImagen) {
                             throw new Error("Respuesta inválida del servidor");
                         }

                         if (this.mostrarModal) {
                             this.productoSeleccionado.nombreImagen = data.nombreImagen;
                             this.productoSeleccionado.rutaImagen = `/imagenes/${data.nombreImagen}`;
                             this.productoSeleccionado.vistaPreviaImagen = this.productoSeleccionado.rutaImagen;
                         } else {
                             this.nuevoProducto.nombreImagen = data.nombreImagen;
                             this.nuevoProducto.rutaImagen = `/imagenes/${data.nombreImagen}`;
                             this.nuevoProducto.vistaPreviaImagen = this.nuevoProducto.rutaImagen;
                         }

                         console.log("Datos actualizados:", this.nuevoProducto, this.productoSeleccionado);
                     })
                     .catch(error => {
                         console.error("Error al subir la imagen:", error);
                         alert(error.message);
                     });

                    this.nuevoProducto.nombreImagen = data.nombreImagen;
                    this.productoSeleccionado.nombreImagen = data.nombreImagen;
                    this.nuevoProducto.vistaPreviaImagen = this.nuevoProducto.rutaImagen;
                    this.productoSeleccionado.vistaPreviaImagen = this.productoSeleccionado.rutaImagen;
                }
            }
        });
        app.mount('#app');
    </script>

    <!-- FIN SCRIPT Vue.js PARA CATEGORIAS -->
</body>
</html>